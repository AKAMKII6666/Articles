结构化理解Webpack配置项
Webpack原生提供了上百种配置项，这些配置项最终都会作用于Webpack大宝过程的不同阶段
因此我们可以从流程角度更框架性结构化的了解

Webpack的大包裹成非常复杂，但是大致可以简化为:

输入
↓
模块处理
↓
后处理
↓
输出

 - 输入：从文件系统读入代码文件；
 - 模块递归处理：调用Loader转译Module内容，并将结果转换为AST，从中分析出模块的依赖关系，并进一步递归处
 理完毕后开始执行后处理，包括模块合并，注入运行时，产物优化等，最终将chunk集合；
 - 输出:将Chunk写出到外部文件系统。

 从上述打包流程角度，Webpack配置项大体可分为两类:

 - 流程类：作用于打包流程某个环节或若干个环节，直接音响编译打包效果的配置项;
 - 工具类：打包主流程之外，提供更多工程化工具的配置项；
------------------------------------------------------------------------
 与打包流程配置相关的配置值有：
 - 输入输出
    -- entry:用于定义项目入口文件，webpack会从这些入口文件开始按图索骥(通过依赖创建树)找出所有项目文件
    -- context:项目执行上下文路径；
    -- output:配置产物输出路径，名称等；
 - 模块处理
    --resolve:用于配置模块路径解析规则，可用于帮助 Webpack 更精确、高效地找到指定模块
    --module:用于配置块加载规则，例如针对什么类型的资源需要使用什么样的Loader进行处理
    --externals:用于声明外部资源，webpack会直接忽略这部分的资源，跳过这些资源的打包操作
 - 后处理
    --optmization:用于控制如何优化产物包体积，内置Dead code Elimination,Scope Hoisting,代码混淆，代码压缩等功能。
    --target:用于配置编译产物的目标运行环境，支持web,node,electron等值，不同值会产出不同的最终产物
    --mode:编译模式短语，支持development,production等值，可以理解为一种声明环境的短语


这些配置项与打包流程强相关，建议学习时多关注它们对主流程的影响，例如 entry 决定了项目入口，而 output 则决定
产物最终往哪里输出；resolve 决定了怎么找到模块，而 module 决定了如何解读模块内容，等等。
-------------------------------------------------------------------------
工具类
提升快发效率的配置功能:
 - 开发效率类:
    -- watch:用于配置持续监听文件变化，持续构建
    -- devtool:用于配置产物Sourcemap的生成规则
    -- devServer:用于配置与HMR强相关的开发(dev)服务器功能
 - 性能优化类:
    -- catche:Webpack5之后，该项用于控制如何缓存编译过程信息与编译结果
    -- performance:用于配置当产物大小超过阈值时，如何通知开发者
 - 日志类:
    -- status:用于精确地控制编译过程的日志内容，在做比较细致的性能调试时非常有用
    -- infrastructureLogging: 用于控制日志输出方式，例如可以通过该配置将日志输出到磁盘文件
 - 等等


---------------------------------------------------------------------------
现成的脚手架工具:
Vue CLI：用于帮助用户快速创建、运行 Vue.js 项目脚手架的命令行工具；
create-react-app：用于创建 React 项目脚手架的命令行工具；
@angular/cli：用于创建 angular 项目的命令行工具；
webpack-cli：Webpack 官方提供的命令行工具，提供了一套交互式生成配置文件的指令集，以及项目编译、开发、迁移等功能；
Neutrino：用于快速创建、运行现代 JavaScript 应用的工具，同时支持 React、Preact、Vue、Web、Node.js、Library 等场景；
react-starter-kit：用于创建 React + Relay + GraphQL 应用的脚手架工具，内置 SSR 支持。

