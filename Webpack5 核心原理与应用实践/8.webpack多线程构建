webpack多线程构建
受限于Nodejs的单线程架构，原生Webpack对所有的资源文件做的所有解析，转译，合并操作
本质上都是在一个县城上串行执行的，cpu利用极低，但是如果可以将其设置为多核cpu运行的
话，可以大大提升打包效率
webpack社区提供了这些组件方案对打包支持多线程处理:
 - HappyPack：多进程方式运行资源加载(Loader)逻辑；
 - Thread-loader：Webpack 官方出品，同样以多进程方式运行资源加载逻辑；
 - Parallel-Webpack：多进程方式运行多个 Webpack 构建实例；
 - TerserWebpackPlugin：支持多进程方式执行代码压缩、uglify 功能。


------------------------------------------------------------------------
使用HappyPack
Happypack能够将耗时的loader（文件加载）操作拆散到多个子进程中并发执行，子进程执行完
之后将结果再发回Webpack的主进程，从而实现构建性能。不过HappyPack的用法稍微有点难以理解
需要同时:
 - 使用HappyPack/loader代替原本的Loader序列；
 - 使用HappyPack插件注入代理执行Loader序列的逻辑;

基本用法:

1.安装依赖：
npm i happypack -D

2.将原有 loader 配置替换为 happypack/loader，如：


module.exports = {
  // ...
  module: {
    rules: [
      {
        test: /\.js$/,
        /*
            将一些原来需要babel处理的文件，转交由happyPack代理进行
        */
        use: "happypack/loader",
        // 原始配置如：
        // use: [
        //  {
        //      loader: 'babel-loader',
        //      options: {
        //          presets: ['@babel/preset-env']
        //      }
        //  },
        //  'eslint-loader'
        // ]
      },
    ],
  },
};

创建 happypack 插件实例，并将原有 loader 配置迁移到插件中，完整配置：


const HappyPack = require("happypack");

module.exports = {
  // ...
  module: {
    rules: [
      {
        test: /\.js$/,
        use: "happypack/loader",
        // 原始配置如：
        // use: [
        //  {
        //      loader: 'babel-loader',
        //      options: {
        //          presets: ['@babel/preset-env']
        //      }
        //  },
        //  'eslint-loader'
        // ]
      },
    ],
  },
  plugins: [
    new HappyPack({
      // 将原本定义在 `module.rules.use` 中的 Loader 配置迁移到 HappyPack 实例中
      loaders: [
        {
          loader: "babel-loader",
          option: {
            presets: ["@babel/preset-env"],
          },
        },
        "eslint-loader",
      ],
    }),
  ],
};


通过配置多个不同的代理可以使不同的loader多线程化:


const HappyPack = require('happypack');

module.exports = {
  // ...
  module: {
    rules: [{
        test: /\.js?$/,
        // 使用 `id` 参数标识该 Loader 对应的 HappyPack 插件示例
        use: 'happypack/loader?id=js'
      },
      {
        test: /\.less$/,
        use: 'happypack/loader?id=styles'
      },
    ]
  },
  plugins: [
    new HappyPack({
      // 注意这里要明确提供 id 属性
      id: 'js',
      loaders: ['babel-loader', 'eslint-loader']
    }),
    new HappyPack({
      id: 'styles',
      loaders: ['style-loader', 'css-loader', 'less-loader']
    })
  ]
};

但是这样做了以后，HappyPack会消耗大量的性能在创建和销毁线程上，这在某些情况下反而是
负优化，所以为了避免这种情况，使happypack运行效率增强，happyPack还有个进程池的功能:
const happyThreadPool = HappyPack.ThreadPool({
  // 设置进程池大小
  size: os.cpus().length - 1
});
这里定义一个进程池，然后将这个池子统一分配给下面的happyPack实例:
module.exports = {
  // ...
  plugins: [
    new HappyPack({
      id: 'js',
      // 设置共享进程池
      threadPool: happyThreadPool,
      loaders: ['babel-loader', 'eslint-loader']
    }),
    new HappyPack({
      id: 'styles',
      threadPool: happyThreadPool,
      loaders: ['style-loader', 'css-loader', 'less-loader']
    })
  ]
};

------------------------------------------------------------------------------
HappyPack的缺点:
 - 作者自己都说不会再维护,随着webpack的更新，它肯定会出现各种问题。
 - HappyPack的底层是作者仿照webpack的加载器，重新实现的一套逻辑，会导致一些意想不到的问题
 - HappyPack主要用于文件加载的阶段，和后面的流程关系不大，收益有限。



------------------------------------------------------------------------
使用Thead-loader
thead-loader与HappyPack功能类似，都是以多进程方式加载文件的webpack组件，两者的主要区别

 - Thread-loader 由 Webpack 官方提供，目前还处于持续迭代维护状态，理论上更可靠；
 - Thread-loader 只提供了一个 Loader 组件，用法简单很多；
 - HappyPack 启动后会创建一套 Mock 上下文环境 —— 包含 emitFile 等接口，并传递给 Loader，
 因此对大多数 Loader 来说，运行在 HappyPack 与运行在 Webpack 原生环境相比没有太大差异；
 但 Thread-loader 并不具备这一特性，所以要求 Loader 内不能调用特定上下文接口，兼容性较差。

看看它的用法:
npm i thread-loader -D

将thread-loader放在use链的首位:
module.exports = {
  module: {
    rules: [
      {
        test: /\.js$/,
        use: ["thread-loader", "babel-loader", "eslint-loader"],
      },
    ],
  },
};

此外，Thread-loader 还提供了一系列用于控制并发逻辑的配置项，包括：

 - workers：子进程总数，默认值为 require('os').cpus() - 1；
 - workerParallelJobs：单个进程中并发执行的任务数；
 - poolTimeout：子进程如果一直保持空闲状态，超过这个时间后会被关闭；
 - poolRespawn：是否允许在子进程关闭后重新创建新的子进程，一般设置为 false 即可；
 - workerNodeArgs：用于设置启动子进程时，额外附加的参数。

不过，Thread-loader 也同样面临着频繁的子进程创建、销毁所带来的性能问题，为此，Thread-loader 提供了 warmup 
接口用于前置创建若干工作子进程，降低构建时延，用法：
const threadLoader = require("thread-loader");

threadLoader.warmup(
  {
    // 可传入上述 thread-loader 参数
    workers: 2,
    workerParallelJobs: 50,
  },
  [
    // 子进程中需要预加载的 node 模块
    "babel-loader",
    "babel-preset-es2015",
    "sass-loader",
  ]
);

与 HappyPack 相比，Thread-loader 有两个突出的优点，一是产自 Webpack 官方团队，后续有长期维护计划，
稳定性有保障；二是用法更简单。但它不可避免的也存在一些问题：

 - 在 Thread-loader 中运行的 Loader 不能调用 emitAsset 等接口，这会导致 style-loader 这一类加载器无法正常工作，解决方案是将这类组件放置在 thread-loader 之前，如 ['style-loader', 'thread-loader', 'css-loader']；
 - Loader 中不能获取 compilation、compiler 等实例对象，也无法获取 Webpack 配置。

这会导致一些 Loader 无法与 Thread-loader 共同使用，大家需要仔细加以甄别、测试。

----------------------------------------------------------------------------
使用 Parallel-Webpack
Thread-loader,HappyPack这类组件所提供的并行处理能留仅仅用于文件的加载过程。
Parallel-Webpack则是针对需要一个项目输出多种不同环境代码时准备的多线程打包工具

虽然，parallel-webpack 相对于 Thread-loader、HappyPack 有更高的并行度，但进程实
例之间并没有做任何形式的通讯，这可能导致相同的工作在不同进程 —— 或者说不同 CPU 核上被重复执行。

例如需要对同一份代码同时打包出压缩和非压缩版本时，在 parallel-webpack 方案下，前置的
资源加载、依赖解析、AST 分析等操作会被重复执行，仅仅最终阶段生成代码时有所差异。

这种技术实现，对单 entry 的项目没有任何收益，只会徒增进程创建成本；但特别适合 MPA 等多 entry 
场景，或者需要同时编译出 esm、umd、amd 等多种产物形态的类库场景。


-----------------------------------------------------------------------------
并行压缩
Webpack5自带Terser压缩，通过一些参数可以调整Terser压缩的性能:
const TerserPlugin = require("terser-webpack-plugin");

module.exports = {
    optimization: {
        minimize: true,
        minimizer: [new TerserPlugin({
            parallel: 2 // number | boolean
        })],
    },
};


------------------------------------------------------------------------------
总结
 - 对于 Webpack4 之前的项目，可以使用 HappyPack 实现并行文件加载；
 - Webpack4 之后则建议使用 Thread-loader；
 - 多实例并行构建场景建议使用 Parallel-Webpack 实现并行；
 - 生产环境下还可配合 terser-webpack-plugin 的并行压缩功能，提升整体效率。

理论上，并行确实能够提升系统运行效率，但 Node 单线程架构下，所谓的并行计算都只能依托与派生子进程执行，
而创建进程这个动作本身就有不小的消耗 —— 大约 600ms，对于小型项目，构建成本可能可能很低，
引入多进程技术反而导致整体成本增加，因此建议大家按实际需求斟酌使用上述多进程方案。

