 webpack5中的持久化缓存
 持久化缓存是webpack5中最令人振奋的特性之一了，它能够将首次构建的过程和结果数据持久化保存
 到本地文件系统，在下次构建的时候跳过解析，链接，编译等等一系列非常消耗性能的操作，直接复用
 上次的Module/ModuleGraph/Chunk对象数据，迅速构建出最终产物.

仅仅需要在webpack5中配置:
module.exports = {
    //...
    cache: {
        type: 'filesystem'
    },
    //...
};
就可以开启webpack的持久化缓存

此外，cache还提供了其它的配置项目用于调节持久化缓存的功能.

 - cache.type：缓存类型，支持 'memory' | 'filesystem'，需要设置为 filesystem 才能开启持久缓存；
 - cache.cacheDirectory：缓存文件路径，默认为 node_modules/.cache/webpack ；
 - cache.buildDependencies：额外的依赖文件，当这些文件内容发生变化时，缓存会完全失效而执行完整的编译构建，通常可设置为各种配置文件，如：
module.exports = {
  cache: {
    type: 'filesystem',
    buildDependencies: {
      config: [
        path.join(__dirname, 'webpack.dll_config.js'),
        path.join(__dirname, '.babelrc')
      ],
    },
  },
};
 - cache.managedPaths：受控目录，Webpack 构建时会跳过新旧代码哈希值与时间戳的对比，直接使用缓存副本，默认值为 ['./node_modules']；
 - cache.profile：是否输出缓存处理过程的详细日志，默认为 false；
 - cache.maxAge：缓存失效时间，默认值为 5184000000 。

 ----------------------------------------------------------------------------
 缓存原理
 
在说缓存原理之前，需要看看webpack的打包流程:

初始化 → 构建阶段
            ↓
        读入文件
            ↓
        执行loader链
            ↓
        解析AST(语法树)
            ↓
        解析依赖            →        生成阶段
                                        ↓
                                    代码转译
                                        ↓
                                    收集运行时依赖
                                        ↓
                                    生成Chunk
                                        ↓
                                    产物优化            →           写出硬盘


简单来说就是 
初始化  →  构建阶段  →  生成阶段  →  写出硬盘

 - 初始化主要是根据配置信息设置内置的各类插件
 - 构建阶段,从entry模块开始，执行：
    -- 读入文件内容；
    -- 调用loader转译文件内容；
    -- 调用acorn生成AST结构；
    -- 分析AST,去顶模块依赖表;
    -- 遍历模块依赖列表，对每一个依赖模块重新执行上述流程，直到生成完整的模块依赖图 -- ModuleGraph对象
- 生成阶段
    -- 遍历ModuleGraph对每一个模块执行:
        ---代码转译，例如将import转换为require,把export转换成define
        ---分析运行时依赖
    --合并模块代码与运行时代码，生成chunk;
    --执行产物优化操作，如Tree-shaking;
    --将最终结果写出到硬盘

这个过程里有很多都是cpu密集型的操作例如:
构建阶段：
loader加载文件
tsloader还是生成语法树
分析模块依赖的时候还要从每个文件的语法树里查找引用关系

生成阶段：
也存在大量的语法树操作，例如需要通过语法树将import转换成require吧export转换成define
合并模块代码需要从依赖关系树里查找非异步引用并把他们进行合并操作。
Tree-shaking也是一个非常费性能的操作，它的作用是遍历语法树，找到没有被用过的语句并去除。


其实webpack这样的缓存机制叫缓存代理
它内部实现了一个缓存代理，在构建阶段会通过缓存代理检查本地的缓存


初始化 → 构建阶段
            ↓
        读入文件
            ↓
        执行loader链
            ↓
        解析AST(语法树)
            ↓
        解析依赖            →        生成阶段
                                        ↓
                                    代码转译
                                        ↓
                                    收集运行时依赖
                                        ↓
                                    生成Chunk
                                        ↓
                                    产物优化            →           写出硬盘


webpack主要讲Module,Chunk,ModuleGraph三类对象的状态进行序列化保存到硬盘里；
下次初始化的时候就会从硬盘里拿出来并在相关的位置核实缓存信息，来决定是否直接使用缓存
还是再构建一遍

----------------------------------------------------------------
一些组件本身的缓存功能
Babel：
module.exports = {
    // ...
    module: {
        rules: [{
            test: /\.m?js$/,
            loader: 'babel-loader',
            options: {
                cacheDirectory: true,
            },
        }]
    },
    // ...
};
----------------------------------------------------------------
ESLint 和  Stylelint 
module.exports = {
  plugins: [
    new ESLintPlugin({ cache: true }),
    new StylelintPlugin({ files: '**/*.css', cache: true }),
  ],
};



