requestAnimationFrame回调函数会在绘制之前执行。
requestIdleCallback是在绘制之后执行。

requestAnimationFrame
这个我们知道，就是在动画帧开始前做一些动画的代码提交操作。

requestIdleCallback
是在浏览器每一帧绘制完成之后的回调。

这两个函数都是浏览器自带API

requestIdleCallback 是什么？
requestIdleCallback 是一个还在实验中的 api,可以让我们在浏览器空闲的时候做一些事情

RequestIdleCallback 简单的说，判断一帧有空闲时间，则去执行某个任务。目的是为了解决
当任务需要长时间占用主进程，导致更高优先级任务(如动画或事件任务)，无法及时响应，而带
来的页面丢帧(卡死)情况。故RequestIdleCallback 定位处理的是: 不重要且不紧急的

let redcb = window.requestIdleCallback(function(){},[options]);

 - 返回一个id,可以把它传入window.cancelIdleCallBack()方法来停止某个任务。
 - callback一个在事件循环空闲时即将被调用的函数的引用。函数会接收到一个名为 IdleDeadline
  的参数，这个参数可以获取当前空闲时间以及回调是否在超时时间前已经执行的状态。
 - options 可选 包括可选的配置参数。具有如下属性：timeout：如果指定了timeout，并且
 有一个正值，而回调在timeout毫秒过后还没有被调用，那么回调任务将放入事件循环中排队，
 即使这样做有可能对性能产生负面影响。


1.不要在requestIdleCallback 里执行修改DOM操作
强烈建议不要在requestIdleCallback里面执行修改 DOM 的操作. 从上面一帧的构成中可以看到, 
requestIdleCallback回调执行之前, 样式变更以及布局计算等都已经完成. 如果在callback中修改
 DOM 的话, 之前所作的布局计算都会失效. 并且如果下一帧里有获取布局相关的操作, 浏览器就需要
 强制进行重排, 极大的影响性能. 另外由于修改 DOM 的时间是不可预测的, 因此容易超过当前帧空闲
 的阈值.

 推荐的做法是在 ***requestAnimationFrame***里面做 DOM 的修改.

2.除了不推荐 DOM 修改操作外, **Promise的resolve(reject)**操作也不建议放在里面, 因为Promise
的回调会在 idle 的回调执行完成后立即执行, 拉长当前帧的耗时. promise 的回调属于优先级较高的微
任务，所以会在 requestIdleCallback 回调结束后立即执行，可能会给这一帧带来超时的风险。



可以做什么:

1.数据的分析和上报

 - 在用户有操作行为时（如点击按钮、滚动页面）进行数据分析并上报。

 - 处理数据时往往会调用 JSON.stringify ，如果数据量较大，可能会有性能问题。

此时我们就可以使用 requestIdleCallback 调度上报时机，避免上报阻塞页面渲染.

2.在空闲的时候加载些东西，可以看看 qiankun 的例子，用来预加载 js 和 css


3.检测卡顿
一般检测的卡顿方法有两种：

 - 测量 fps 值，如果连续出现几个 fps 值 ≤ 阈值，则认为是卡顿

 - 开辟一个 worker 线程和主线程之间来个心跳检测，一段时间内没响应，则认为是卡顿

回过头来，如果 requestIdleCallback 长时间内没能得到执行，说明一直没有空闲时间，很有可能就是发生了
卡顿，从而可以打点上报。它比较适用于行为卡顿，举个例子：点击某个按钮并同时添加我们的 requestIdleCallback
回调，如果点击后的一段时间内这个回调没有得到执行，很大概率是这个点击操作造成了卡顿。


4.拆分耗时任务

这个思想在 React 中的调度器 Scheduler里面展现的淋漓尽致，虽然 React 自己实现了一套调度逻辑(兼容性、稳定性
和优先级等原因)，不过不妨碍我们理解。简单来说 React 把 diff 的过程从早前的递归变成了现在的迭代，对两个大对
象进行递归 diff 就是个耗时的任务，如果能够拆解成小任务，那该有多好。但是递归又不能中途终止，所以 React 采用
了 fiber 这种数据结构，把递归变成了链表迭代，迭代就可以中途停止，我们就不用一次性 diff 完。ps：不懂链表的同
学就简单理解成是数组吧，你想想如果我们要把数组进行遍历，我们可以一次性执行完，但是我们也可以拆成几次执行完，
只要我们记录个 index，下次回来继续执行代码的时候就从 index 开始遍历就行，不知道大家 get 到木有。





