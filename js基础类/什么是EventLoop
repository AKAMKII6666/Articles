https://blog.csdn.net/WH_Crx/article/details/118512499
EventLoop
什么是EventLoop?


EventLoop是一个重要的概念，指的是计算机系统的一种运行方式，
Javascript语言就是采用的这种机制，来解决单线程运行带来的一些问题。

然而想要理解EventLoop就必须要从进程说起（运行以后的程序叫做进程），且一般情况下一个进程只能执行一个任务。

所以解决很多任务的执行无外乎三种方法：
1.排队。因为一个进程只能执行一个任务，那就等待前面的任务执行完成后再进行队列后面的任务；
2.新建进程。使用fork命令，为每个任务新建进程。
3.新建线程。因为进程太消耗资源，所以如今的程序往往一个进程包含多个线程去做，由线程去完成任务。

由于Javascript是单线程语言，所有任务都是在一个线程上完成的，所以一旦遇到大量的任务，或者一个非常耗时的
任务，网页就会出现假死的情况。因为js正在运行中，浏览器正在处理单线程的js任务，无法响应用户行为。

由于js在设计的时候就不想让它太过于复杂且占用太多资源，所以后来也就约定俗成了一种单线程语言。

单线程就意味着，所有任务都得排队，前一个任务刚技术，才会执行后面的任务。
一般影响任务执行的是I/O操作。例如读取硬盘，写入硬盘。Http请求等。


-------------------------------------------------------------------------------------
参考文章:
https://www.cnblogs.com/simonbaker/p/5715393.html
所以EventLoop就是为了解决这个问题而被提出的
就是在程序中设置两个线程，一个专门负责程序本身的运行，称之为主线程。
一个负责主线程与其它进程的通信（主要是各种I/O操作），被称之为EventLoop线程(也可以称作消息线程).

所以js的语言设计者很快意识到，这是cpu可以不管io设备，先挂起尚在等待的任务，先执行队列里的任务，等io
回来之后再回去执行响应的任务。

于是Js就有了两种执行任务的方式：
 - 一种是让cpu按顺序执行任务，一个接一个，这叫同步执行。
 - 一种是让cpu跳过需要等待超长时间的任务，先处理后面的任务，这叫异步执行
以上两种执行方式，开发人员可以自己选择。
-------------------------------------------------------------------------------------
https://zhuanlan.zhihu.com/p/410760102
专业点讲，js是一门非阻塞式单进程单线程语言，就是说，不存在并行代码，只能一行一行的执行。
比如点击操作，用户点击后当然希望是立刻有反馈，没反馈就肯定关浏览器走了。
那么一个简单地问题来了，我们经常听到的js中的异步请求是什么鬼？不是说单线程吗？那异步请求是谁在执行？

本文所指浏览器均为谷歌的chrome浏览器

chrome浏览器是典型的多进程架构，即chrome也是由多个子进程组成的，具体包括：
1.浏览器进程，负责管理除了浏览器页面的显示区域的其它区域，包括地址栏，设置，书签等。
2.渲染进程，该进程又被称为内核，该线程又包含多个重要的子进程组成：
    - Gui线程，浏览器拿到请求资源后，有一部操作就是，根据html和css文件分别生成dom树和样式树，
      然后生成渲染树和布局树，这部分的工作就是gui线程完成的。
    - js线程：又称js主线程，就是用来执行js代码的。
    - 合成器线程：该线程获得布局树以后，通过栅格化获取一帧数据，最终交由gpu处理。

    重点：gui线程和js线程是互斥的，当js在更新dom树的时候，因为这么操作可能导致重排和重绘，
    因此，在 js线程运行的时候，GUI线程会挂起。

    - 定时器线程: 如果当js主线程执行代码时，遇到setTimeout和setInterval这两种定时器时，js线程
    会把定时器函数扔给定时器线程处理，自己继续往下执行。定时器线程等待设定时间后，将定时的回调函数
    交给事件触发线程，由事件触发线程负责将回调函数塞入任务队列。从这个过程能够得到前面疑问的答案。
    单线程的异步请求，就是通过渲染进程的多线程架构实现的，定时器函数并不执行具体的代码，只是用来等待
    定时器时间到达。当我们定义了多个定时器，谁先结束等待，谁就先进去事件触发线程里。
    - 事件触发线程：也不执行任何代码，主要任务是在合适的时候将函数加入主线程的队列。
    - 异步HTTP请求线程：负责处理异步的ajax请求,当请求完成之后，他也会通知事件触发线程，然后事件触发
    线程将这个事件放入事件队列，给主线程执行。
    - 网络线程：负责发起和接受网络请求
    - GPU线程：负责整个页面的渲染。
    - 插件线程: 用来管理外部插件（并不是浏览器插件）

有了上面的浏览器大体的线程结构，我们再回过头来看eventLoop：
程序运行后，当碰到ajax代码，js主进程会将这个任务扔给异步http线程，等到http线程将任务执行完毕，又会将这个
任务的执行结果回调函数扔给事件触发线程，事件触发线程负责把它扔给js主线程的任务队列里。
遇到定时器时，会将这个任务扔给定时间线程，定时器现车那个会在定时器设置的时间到了以后，将它的回调函数
扔给事件触发线程，事件触发线程则负责将这个回调函数放到主线程的任务列队里。
等当前主线程的执行代码执行完毕之后，会再去看看任务列队是否有任务，有任务的话就取出来执行，执行完毕再进入
下一次的执行循环直到任务全部执行完毕.

事件列队包含两种，宏任务和微任务。

常见宏任务:
setTimeout/setInterval
setImmediate(Node.js)
I/O
UI事件
postMessage

常见微任务:
Promise

js在执行完所有自己的任务栈中的任务以后，首先会去遍历微任务队列，执行完微任务，才会再去执行宏任务，同时，
执行完一个宏任务，就回去看一下有没有微任务，没有就继续执行宏任务里剩余的任务，有的话就再执行完所有的微任务
才执行宏任务。

这就是事件循环EVENTLOOP
------------------------------------------------------------------------------------------------
总结:
指的是在事件触发线程里，事件任务栈中，有两种类型的任务列表，一种是宏任务列表，一种是微任务列表。微任务列表中
的任务优先，宏任务列表中的任务其次，但不是顺序关系，是执行逻辑的问题。
当主线程任务执行完毕之后，才会让事件触发线程里的两种列表中的任务排进主线程任务栈中。排列顺序是:
 - 先检查微任务列表，有任务的话会全部都执行完，然后进行宏任务
 - 每执行完一项宏任务，就会再会去看是否有微任务存在，有的话就再次把微任务全部执行完，再回到宏任务执行下一个





































