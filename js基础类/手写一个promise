let myPromise = function (_callback) {
	let self = this;
	this.status = "padding";
	this.eventArray = [];
	this.eventIndex = -1;
	this.currentIndex = -1;
	this.catchCall = function () {};

	this.result = null;

	this.resolved = function (_result) {
		try {
			self.status = "fulfilled resolved";
			self.result = _result;
			self.complete();
		} catch (_e) {
			self.catchCall(_e);
			throw _e;
		}
	};

	this.rejected = function (_result) {
		try {
			self.status = "rejected";
			self.result = _result;
			self.complete();
		} catch (_e) {
			self.catchCall(_e);
			throw _e;
		}
	};

	this.then = function () {
		this.eventArray.push(arguments);
		return this;
	};

	this.catch = function (_callback) {
		this.catchCall = _callback;
	};

	this.next = function (_res) {
		self.eventIndex += 1;
		self.complete(_res);
	};

	this.complete = function (_res) {
		if (this.currentIndex === this.eventIndex) {
			this.eventIndex += 1;
		}
		this.currentIndex = this.eventIndex;
		let events = this.eventArray[this.currentIndex];
		if (typeof events === "undefined") {
			return;
		}
		let resolved = events[0] || function () {};
		let rejected = events[1] || function () {};
		if (this.status === "fulfilled resolved") {
			resolved.apply(this, [_res || this.result, this.next]);
		}

		if (this.status === "rejected") {
			rejected.apply(this, [_res || this.result, this.next]);
		}
		this.complete();
	};

	//将它的调用做成一个宏任务模拟微任务进行
	setTimeout(function () {
		_callback(self.resolved, self.rejected);
	}, 0);
};

//promise 最大的作用是可以将一个任务放入EVENTLOOP处理线程中的微任务队列中去,可以在渲染开始前做一些事情

new myPromise(function (_res, _rej) {
	console.log("问题被解决了!");
	_res("解决了");
})
	.then(function (_data) {
		console.log(_data);
	})
	.then(function (_data) {
		console.log(_data + "123123");
	});
