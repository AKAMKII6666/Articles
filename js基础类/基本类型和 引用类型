JS 引用类型:
Object
Array
Date
RegExp
Function

第一种是使用new操作符后跟Object构造函数
另一种方式是使用对象字面量表示法，对象字面量是对象定义的一种简写形式，目的在于简化创建包含大量
属性的对象的过程


Array类型：
可以这样定义:    对象方式创建
实现了迭代器工厂函数Symbol.iterator
let Arr =  new Array();

也可以字面量创建:
let Arr = [1,2,3,4];


数组的一些方法:
1.检测方法
    instanceof()
    instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上
    假如某个对象继承了Array，那么Array就会出现在这个对象的原型链上，那么使用这个去判断这个对象的话
    就会为true反之为false

    isArray()

    一般来说使用typeof就可以判断大多数类型
    但是array就不行，array需要使用Array.isArray()来进行判断

2.转换方法
    Push()
    将元素推进数组
    Pop()
    pop() 方法移除数组的最后一个元素，并返回该元素。

3.队列方法
    shift()
    它能够移除数组中的第一项并返回该项，同时数组数量-1.

4.遍历方法
    map()
    forEatch()

5.排序
    sort()

6.操作方法
    concat()
    concat方法可以基于当前数组中的所有项创建一个新数组，具体来说这个方法会先创建当前数组一个副本
    然后将接受到的参数 添加到这个副本的末尾，最后返回新构建的数组。

    就是拼接两个数组用的方法，但是结果以返回值的方式返回，不会保存在原数组中

    slice()
    能够基于当前数组中的一个或多个项创建一个新的数组

    splice()
    用途是向数组的中部插入项

7.位置方法
    indexof()
    lastIndexof()

9.并归方法
    reduce(function(prev,cur,index,array){
        //用于将前后两项进行相加的方法
    })

基本类型在栈中储存，而引用类型在堆中存储
基本类型:
1.undefined
2.null
3.string
4.boolean
5.number
6.symbol
7.bigint

引用类型
Object
Array
Date
RegExp
Function


基本类型的值是不可变的，向基本类型的 变量赋值的时候，实际是赋予它一个新值，而不是改变旧值。
在传参方面，基本类型时候值传递，引用类型是引用传递。

在值的相等比较上，要区分严格相等(===),还是宽松相等(==)
严格相等：基本类型比较值是否相等
         引用类型比较引用地址是否相等，而不比较具体的值

宽松相等 ：都只是对比值是否相等。甚至有些浏览器有时候会忽略类型

类型检查：typeof
但是区分Array和object需要使用Array.isArray
--------------------------------------------------------------------------------
延伸的面试题:
什么是引用类型，基础类型又是什么？

回答

引用类型都有:
Object
Array
Date
RegExp
Function

基础类型都有:
1.undefined
2.null
3.string
4.boolean
5.number
6.symbol
7.bigint

基本类型在哪里储存，引用类型在哪里储存?
基本类型在栈中储存，而引用类型在堆中存储

那它们在传参的时候有什么不同？
在传参方面，基本类型时候值传递，引用类型是引用传递。

什么是归并方法？
归并方法是指遍历一个数组将其中的元素都归并至一个变量类

Array如何进行归并?
reduce(function(total,cur,index,array){
        //用于将前后两项进行相加的方法

        //返回当前的值和累计值
        return total + cur
    },20)
    最后一个参数是初始值

























