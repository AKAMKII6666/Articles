---------------------------------------------------------------------------
什么是基本类型？什么是引用类型?
基本类型就是
string
number
undefined
null
symbol
bigint

引用类型就是
Object
Array
Date
RegExp
Function

引用类型的话传参是引用传递的，值类型的话传参是值传递的。
类型比较的话 === 引用类型是比较引用地址值类型比较值是否相同，==是比较值是否相同

Array如何进行归并?
reduce(function(total,cur,index,array){
        //用于将前后两项进行相加的方法

        //返回当前的值和累计值
        return total + cur
    },20)
    最后一个参数是初始值
-----------------------------------------------------------------------
闭包是什么?
闭包是指在函数内保留当前代码的运行环境中的变量访问权
当然也可以避免函数内的变量污染当前代码的运行环境
一般以匿名函数的方式出现
比如在做命名空间的时候使用，就是避免变量全局污染


-----------------------------------------------------------------------
如何遍历DOM结构
document.documentElement 作为根，然后使用深度优先，也就是递归的方式进行遍历
但是这样的遍历方式会爆栈，一般可以用迭代法替代。
遍历的方式有深度优先，深度优先的话有前序中序后序的方式。
或者用广度优先的方式，或者叫层叠遍历来做。这种方式只能用迭代法。

-----------------------------------------------------------------------
什么是迭代器？
迭代器就是指可以使用一个对象，通过调用它的next的方式更新迭代其中的内容。
这个对象已经在浏览器内部实现了，属于es6的特性
symbol.Iterator
实现了这个接口的对象都可以使用迭代器的特性，例如array就可以使用 for of,
for of 的话只是利用了迭代器中next的特性进行循环而已，实际上本质还是不断地调用next进行迭代


-----------------------------------------------------------------------
了解map对象吗?
map对象类似c#里面的dirctionary
可以直接new一个map 然后map.set键值对
map里面也实现了symbol.Iterator接口
可以对其进行迭代


-----------------------------------------------------------------------
了解Symbol类型吗?
首先Symbol是基础类型，用来标明一些变量是独有变量用的
就是以前在写一个全局且为空时赋值，不为空时不可覆盖配置的时候，使用的是window.s1,然后希望在下次设置window.s1的时候
不要去覆盖，有的话就使用，没有的话才创建。
那么现在可以使用Symbol.for来实现这样的特性，且跨平台。可以nodejs使用也可以浏览器上使用

其实不常用，只是学习过。


-----------------------------------------------------------------------
promise主要是用来干啥的？什么时候用？
promise主要用来创建微任务的，一般在做一些优先级别较高的任务时使用。
比如http请求，web3的请求等等。

-----------------------------------------------------------------------
promise中有哪些静态类型，主要有什么用?
它们都是用来批量执行promise任务的。
Promise.all             是批量执行一组promise任务 然后失败的话只会返回第一个失败的，失败一个都不行，成功的话都会返回结果
Promise.allSettled      是批量执行一组promise任务 然后无论成功失败都会讲所有任务的状态返回。
Promise.race            是批量执行一组promise任务 只返回第一个无论成功或者失败的promise事件任务
Promise.any             是批量执行一组promise任务 只返回第一个成功的Promise值

-----------------------------------------------------------------------
requestIdleCallback是干啥的？
这是浏览器提供的一个新的api
意思是在帧空闲的时候执行一些任务，比如react的fiber的reconcile过程就是在这里面进行的

-----------------------------------------------------------------------
什么是宏任务和微任务?
首先宏任务和微任务都被浏览器的事件线程托管的。
这其中涉及到EVENTLOOP的运行机制，就是当主js进程中的任务队列运行完成之后，会先去微任务中执行任务，而且要一次性全部执行完
然后在去宏任务里执行一个任务，之后再去微任务里执行任务，如果微任务里有任务那就全部执行完，再执行下一个宏任务，如果微任务列队里面没有任务
就继续执行下一个宏任务。

-----------------------------------------------------------------------
原型链是什么？
原型链是一种设计模式，我们浏览器天生就实现了这样的设计模式、
在浏览器中，原型链最顶层的对象是object,object上面的原型为null
原型链的核心就是复制，或者说拷贝，在我们创建一个对象的时候，实际上就是将其复制了一份，
并将复制的这一份之中的prototype属性指向我们复制的那个原始对象。
例如Array的prototype是object
如果我们new一个array 那么就是通过Array的构造器派生出来的新的对象 它的__proto__指向的就是它的原型Array 
如果我们在Array上面使用了一个Array上并不存在的属性或者方法，它会在链上一直向上寻找这个属性或者方法。

-----------------------------------------------------------------------
创建对象时可以哪些方法进行创建?
1.class关键字
2.构造函数
3.工厂函数，也就是object.create

-----------------------------------------------------------------------
深拷贝一共有哪些方法，都会遇到什么问题？
最简单的方法就是JSON.parse(JSON.stringify(aaa));
嵌套执行
这样的缺陷是会爆栈
可以自己写克隆方法，使用迭代法遍历避免爆栈。
自己写的话主要需要避免爆栈
避免循环引用。

----------------------------------------------------------------------
let和var 有什么区别
let是块级作用域
var 是函数级作用域

----------------------------------------------------------------------
const中的值会被修改吗?
如果是对象可以修改它的属性
但是如果是基本类型，就修改不了

----------------------------------------------------------------------
跨域一般是怎么解决的？
如果在数据源可控的情况下可以使用jsonP的方式。
就是把数据源包装成js文件，通过script的方式载入到当前运行环境全局运行，通过在本地定义一个全局的函数来接受数据。
如果在数据源不可控，但是对方服务器可控的情况下，可以让对方在服务器中开启跨域白名单。但是我们的请求头也要做相关配置。
如果对方的数据源不可控服务器不可控就只能设置本地的host了。





