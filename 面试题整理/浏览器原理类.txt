浏览器在发送请求出去之后发生了什么?

首先是经过了dns解析
服务器收到响应
返回建立tcp链接
发送http请求
服务器响应http请求
返回html页面
浏览器收到html页面

浏览器收到html页面之后，html文档将会被转交至渲染进程的gui线程进行进行处理
开始解析html 对html构建dom树
在解析到css时，对css构建cssom树
这两个过程是异步同时进行的，构建css树的时候会比较消耗资源，有时候dom树构建完了css树还在进行，要避免大深度的css选择器的编写。
然后组装渲染树，渲染树的组装一个是将css树和dom树进行合并，然后计算每个dom节点位置和大小,以及剔除display:none这种类型的节点。
然后进行分层，也就是composite,这是个重点，浏览器会把带有一些特殊css属性的节点单独分为一层
例如有层叠上下文的节点  设置了position的  zindex的，overflow的transform的translate的
这里有个优化点，如果页面上有些地方会在js里执行一些动画，可以使用will-change属性来强行将这个层分为一层，优化页面的运行效率
还有个层爆炸的问题，层爆炸的话可能是绝对定位层太多了导致的，这样一来可能页面上特效特别多，可以用canvas来解决，一般用pixi来解决
然后根据这个分层的结果，拿到渲染列表，光栅化
然后提交gpu进行渲染。

---------------------------------------------------------
简单聊聊重绘和回流是什么?
在更改了元素的几何属性的时候，例如width、height、padding、margin等会触发回流，会回到组装渲染树的过程全部节点重新绘制一遍
在更改了元素的颜色背景图片等不会更改几何特性的时候就不会回流只会重绘，包括translate等等
如果在js中一直获取元素的绝对位置也会引发回流

---------------------------------------------------------




























































