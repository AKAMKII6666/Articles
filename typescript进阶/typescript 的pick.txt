typescript的话，可以在某个自定义类型中挑选类型

比如这里自定义了一个类型

type LEIXING = {
    name:string,
    id:number,
    type:string
}

定义一个泛型选择器
这里的意思是，这个类型PICK 接受两个参数，一个是元类型 T 一个是需要进行挑选的类型U  返回新的自定义类型
type PICK = <T, U extends key of T> = {
    [P in U]:T[P]
}

let bianliang : PICK<LEIXING,"name" | "id"> = {
    name:"1",
    id:1
}

需要注意的是，这里的PICK中的泛型挑选的时候，使用的操作关键字是extends, key of



这里的PICK是自定义的
实际上ts已经提供了我们想要的东西了:
let bianliang : Pick<LEIXING,"name" | "id"> = {
    name:"1",
    id:1
}
