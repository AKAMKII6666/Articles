javascript 设计模式：https://juejin.cn/book/6844733790204461070/section/6844733790263181325

什么是设计模式

在软件工程中，设计模式（Design Pattern）是对软件设计中普遍存在（反复出现）的各种问题，
所提出的解决方案。 ——维基百科

“橘生淮南则为橘,橘生淮北则为枳”——一些在服务端应用场景下看似合理、好用又酷炫的操作，生搬硬
套到前端的场景里可能就会弄巧成拙。


前端相关的设计模式都有哪些
1.创建型：
    工厂模式
    抽象工厂模式
    原型模式

2.结构型
    装饰器模式
    适配器模式
    代理模式

3.行为型
    观察者模式
    策略模式
    状态模式
    迭代器模式


SOLID设计原则
"SOLID" 是由罗伯特·C·马丁在 21 世纪早期引入的记忆术首字母缩略字，指代了面向对象编程和面向对象设计的五个基本原则。

设计原则是设计模式的指导理论，它可以帮助我们规避不良的软件设计。SOLID 指代的五个基本原则分别是：

单一功能原则（Single Responsibility Principle）
开放封闭原则（Opened Closed Principle）
里式替换原则（Liskov Substitution Principle）
接口隔离原则（Interface Segregation Principle）
依赖反转原则（Dependency Inversion Principle）

在Javascript设计模式中，主要用到的设计模式基本都围绕“单一功能”和“开放封闭”这两个原则展开.

20年前GOF提出的最经典的23种设计模式:
创建型：
    单例模式
    原型模式
    构造器模式
    工厂模式
    抽象工厂模式

结构型：
    桥接模式
    外观模式
    组合模式
    装饰器模式
    适配器模式
    代理模式
    享元模式

行为型：
    迭代器模式
    解释器模式
    观察者模式
    中介者模式
    访问者模式
    状态模式
    备忘录模式
    策略模式
    模板方法模式
    职责链模式
    命令模式

    


设计模式的核心思想就是封装变化，无论是创建型，结构型还是行为型这些具体的设计模式都是在
用自己的方式去封装不同类型的变化

创建型模式
封装了创建对象过程中的变化，它做的事情就是将创建对象的过程抽离。

结构型模式
封装的是对象之间组合方式的变化，目的在于灵活表达对象间的配合与依赖关系。

行为模式
则是将对象千变万化的行为进行抽离，确保我们能够安全封边地对行为进行更改。


=====================================================================================
=====================================================================================
=====================================================================================
构造器模式:
let elephent = function(name,age,career){
    this.name = name;
    this.age = age;
    this.career = career;
}

let aaa = new elephent("a",2,[a,s,d,a,s,d,s,a]);

=====================================================================================
=====================================================================================
=====================================================================================

简单工产模式（工厂模式）:

let animal = function(name,age,career,type){
    this.name = name;
    this.age = age;
    this.career = career;
    this.type = type;
}

let Factory = function(name,age,type){
    let career;
    switch(type){
        
        case 'cat':
            career = ["吃","喝","拉","撒"];
            break;
        case "dog":
            career = ["吃","喝","拉","撒","舔"];
            break;
    }

    return new animal(name,age,career,type);
}

工厂模式就是将创建对象的过程单独封装。

工产模式的目的就是为了可以无脑传参然后通过这样的方式获得一个对象。

工厂模式的简单之处，在于他的概念相对好理解，将创建对象的过程单独封装，这样的操作就是工厂模式。
同时它的应用场景也非常容易识别：就是有构造函数的地方，就可以用。
在写了大量的构造函数，调用了大量的new,自觉非常不爽的情况下那我们就可以考虑是不是可以使用工厂
模式了。

构造器解决的是多个对象实例的问题，简单工厂解决的是多个类的问题。那么当复杂度从多个类共存上升到
多个工厂共存时，又该怎么处理呢？

开放封闭原则：
对拓展开放，对修改封闭
也就是（类，模块，函数）可以进行扩展，但是不可修改。

=====================================================================================
=====================================================================================
=====================================================================================

抽象工厂类:
class MobilePhoneFactroy{
    //操作系统
    createOS(){
        throw new Error("抽象工厂方法不允许直接调用，你需要将我重写！");
    }

    //硬件
    createHardWare(){
        throw new Error("抽象工厂方法不允许直接调用，你需要将我重写！");
    }
}

抽象工厂类是不干活的，是用来制定规则的。

抽象工厂不干活，具体的工厂干活：
class FakeStarFactory extends MobilePhoneFactroy{
    //具体制造操作系统
    createOS(){
        return new AAAA();
    }

    //具体制造硬件
    createHardWare(){
        return new bbb();
    }
}

例如上文中createOS中new的AAAA对象，这样直接new出来的对象我们管它叫具体产品类，但是由于具体产品类
可能会有很多种，我们不可能每一种产品都写一个类，所以我们可以先写“抽象产品类”里面可以制定一些具体产品
类里面统一存在的属性和方法，然后使用具体产品类去实现（重写）或者扩展它们。

定义抽象类:
class A{
    controlHardWare(){
         throw new Error('抽象产品方法不允许直接调用，你需要将我重写！');
    }
}

//然后让具体的产品类去继承它并实现它的方法
class AAAA extends A(){
    controlHardWare(){
         console.log("使用AAAA的方式操作硬件!");
    }
}

class AAAA2 extends A(){
     controlHardWare(){
         console.log("使用AAAA2的方式操作硬件!");
    }
}


bbb的话也是一样的:


定义抽象类:
class b{
    operaterByOrder(){
         throw new Error('抽象产品方法不允许直接调用，你需要将我重写！');
    }
}

//然后让具体的产品类去继承它并实现它的方法
class bbb extends b(){
    operaterByOrder(){
         console.log("使用bbb的方式运行!");
    }
}

class bbb2 extends b(){
     controlHardWare(){
         console.log("使用bbb2的方式运行!");
    }
}


然后我们的工厂就有两个了:

class FakeStarFactory extends MobilePhoneFactroy{
    //具体制造操作系统
    createOS(){
        return new AAAA();
    }

    //具体制造硬件
    createHardWare(){
        return new bbb();
    }
}


class FakeStarFactory2 extends MobilePhoneFactroy{
    //具体制造操作系统
    createOS(){
        return new AAAA2();
    }

    //具体制造硬件
    createHardWare(){
        return new bbb2();
    }
}

然后我们就可以使用不同的工厂制造不同的手机了

如果要制造FakeStar2:

let fakestar2PhoneFact = new FakeStarFactory2();
let os2 = fakestar2PhoneFact.createOS();
let hardWare2 = fakestar2PhoneFact.createHardWare();

如果要制造FakeStar:

let fakestarPhoneFact = new FakeStarFactory();
let os2 = fakestar2PhoneFact.createOS();
let hardWare2 = fakestar2PhoneFact.createHardWare();

其实抽象工厂的原则是，开放扩展，封闭修改。
所以需要用抽象类的方式开放扩展，封闭修改。
这样一来就算是工厂也需要抽象化

所以抽象工厂的四个标准准具体角色是：
抽象工厂
具体工厂
抽象产品
具体产品

简单工厂，或者工产模式，解决了构造器模式创建同一类型的类代码量过大的问题。
抽象工厂解决了简单工厂没有开放扩展封闭修改的问题。
抽象工厂在遇到需求大幅变更时可以更灵活地安排和组织我的代码。


=====================================================================================
=====================================================================================
=====================================================================================

单例模式:
保证类只有一个实例，并且提供一个访问它的全局访问点，这样的模式叫单例模式

单例模式其实很简单也很好理解，就是以前在写es5站点的时候，全局定义的一个common类就是单例模式
在React里，使用context可以通过自定义Hook可以创建单例模式的对象。
在vue里，可以使用vuex创建单例模式的对象,但是这个我很少用。

单例模式的应用：
1.cookie的读取和存储对象，可以使用单例模式实现
2.弹出窗口组件可以使用单例模式实现
3.tips提示组件可以使用单例模式
4.Storage的单例模式封装


=====================================================================================
=====================================================================================
=====================================================================================

原型模式：
原型模式不仅是一种设计模式，它还是一种编程范式，是Javascript面向对象系统实现的根基。
在原型模式下，当我们想要创建一个对象时，会先找到一个对象作为原型，然后克隆原型的方式来创建出
一个与原型一样的对象。在Javascript里，Object.create方法就是原型模式的天然实现，准确地说，只要
我们还在借助prototype来实现对象的创建和原型的继承，那么我们就是在应用原型模式。

有的设计资料模式资料中会强调，原型模式就是拷贝出一个新对象，认为在Javascript类里实现了深拷贝方法
才算是应用了原型模式。这是非常典型对Java/c++设计模式的生搬硬套，更是对javascript原型模式的一种误解。

事实上，在JAVA中，确实存在原型模式相关的克隆接口规范。但在Javascript中，我们使用原型模式，并不是为了
得到一个副本，而是为了得到与构造函数（类）对应的类型的实例，实现数据、方法的共享。克隆只是实现这个目的
的方法，但克隆本身不是我们的目的。




以类为中心的语言和以原型为中心的语言
原型模式是Javascript这门语言面向对象的系统的根本。但是在Java或者C#中，类才是他们面向对象系统的根本。
在以类为中心的语言中，原型模式不是一个必然选择，它只是在特定的场景下才会登场。


Javascript中的类：

实际上javascript中根本不存在类，ES6语言里的类的写法是指在模拟强类型语言的语法方式，本质是语法糖：
具体来说，是原型继承的语法糖:
--------------------------
class dog{
    name;
    age;
    constructor(name,age){
        this.name = name;
        this.age = age;
    }

    eat(){
        console.log('这他妈好吃');
    }
}
------------------------
原生写法:
var dog = function(name,age){
    this.name = name;
    this.age = age;
}

dog.prototype.eat = function(){
    console.log('这他妈好吃');
}
------------------------

所以说Javascript这门语言的个根本就是原型模式。在Java等强类型语言中，原型模式的出现是
为了实现类型之间的解耦。而Javascript本身类型就比较模糊，不存在类型耦合的问题，所以
说咋们平时根本不是刻意地去使用原型模式。因此我们此处不必强行把原型模式当做一种设计模式去理解
把它作为一种编程范式来讨论会更适合。


谈论原型模式，就是谈论原型范式。
原型编程范式的核心思想就是利用实例来描述对象，用实例作为定义对象和继承的基础。在Javascript中，
原型编程范式的体现就是基于原型链的继承。这其中，对原型，原型链的理解是关键。

原型：

在Javascript中，每个构造函数都拥有一个propotype属性，它指向构造函数的原型对象，这个原型对象中
有一个constructor属性指回构造函数；每个实例都有一个__proto__属性，当我们使用构造函数去创建实例时，
实例的__proto__属性就会指向构造函数的原型对象。具体来说，当我们这样使用构造函数创建一个对象时。

例如 window.Array.prototype  就是Array的原型对象
如果  window.Array.prototype.__proto__ 就能挖到Array是基于Object类型进行原型继承的。

如果:
var arr = new Array();

arr.__proto__ 就是Array
arr.__proto__.__proto__ 就是Object

这其中有这么几个实体：
原型对象
构造函数
实例对象

在构造函数未实例化之前:
构造函数的prototype是原型对象，
原型对象的constructor是构造函数。


在构造函数实例化之后。
实例对象的__proto__是原型对象，
原型对象的constructor是构造函数。
构造函数的prototype是原型对象，

共同点
构造函数的__proto__是它继承的原型对象。

原型链
当调用一个对象上不存在的方法的时候，它会在__proto__上一直向上查找存在的方法，并运行然后返回结果。
当我们试图访问一个javascript实例的属性、方法时，它首先搜索这个实例本身；当发现实例没有定义对应的
属性/方法时，它会转而去搜索实例的原型对象；如果原型对象中也搜索不到，他就去搜索原型对象的原型对象，
以此类推，这个搜索轨迹，就叫原型链。

几乎所有的Javascript中的对象都是位于原型链顶端的Object的实例，除了Object.prototype因为它是null.
当然，如果我们手动用Object.create(null)来创建实例，那么它将不会是Object的实例。

这些不仅是基础中的基础，也是面试中的重点。此外在面试过程中，一些面试官可能会刻意混淆Javascript中原型
范式和强类型语言中原型模式的区别，当他们这么做的时候不一定是因为对语言，对设计模式的理解有问题，而很可能
是为了考察你对深拷贝的理解。


深拷贝
这类问题的发问方式有很多，除了“模拟JAVA中的克隆接口”，"jAVASCRIPT实现原型模式"以外，它更常见，更友好的
发问形式是“请实现Js中的深拷贝”

实现Javascript中的深拷贝，有一种非常取巧的方式：
JSON.stringify();
const myobj = {
    a:"1",
    b:"2",
    c:"3",
    d:{
        a:"4",
        b:"5",
        c:"6", 
    }
}

var a = JSON.parse(JSON.stringify(myobj));

这样a就成功拷贝了myobj

但是这种方法无法处理Function 无法处理正则表达式，只有当对象时一个严格的JSON对象的时候才能用这个方法。
大家给出这样的答案没有任何问题，但是不要仅仅只回答这种答案。
             
深拷贝没有完美的方案，每一种方案都有它的边界case。 而面试官向你发问也并非是要求你破解人类的未解之谜，
多数情况下，只是希望考察你对递归的熟练程度。所以递归实现深拷贝的核心思路就是这样的:

我的理解：
首先深拷贝的意思就是复制一棵N叉树的数据结构。
可以使用深度优先（DFS:Depth-First-Search）的遍历方式，复制所有里面的变量。在复制变量的过程中，需要考虑对Function这种引用类型和
Array这种引用类型的处理。

//这是一颗包含了基础类型和引用类型的json对象
const myobj = {
    a:"1",
    b:"2",
    c:"3",
    d:{
        a:"4",
        b:"5",
        c:"6", 
        arr:[1,2,3,4,5,6,7]
    },
    func:function(){
        console.log(this.a);
    }
}
/*
深度克隆要注意这几种情况：
1.在递归的时候（就是在深度优先（DFS:Depth-First-Search）遍历的时候）注意不要使用闭包，在操作被克隆项目时需要使用return返回，避免产生引用。
2.需要处理类型判断的情况，主要判断基本类型和两种引用类型就好了（Array和function）
3.使用hasOwnProperty来判断当前被拷贝的对象是否存在当前需要拷贝的值，避免拷贝到原型链上的变量
4.在处理函数的时候，需要将函数在原有对象中的this转接到当前对象中来(用装饰器)
*/

/*
此算法没有考虑到循环引用的情况
*/

//处理函数
let handelFunction = function(_func,_currentObj){
    //其实这里是模拟了一个装饰器模式
    return function(){
        return _func.apply(_currentObj,arguments);
    }
}

//处理array
let handelArray = function(_array,_currentObj){
    var result = new Array();
    for(i of _array){
        result.push(desideType(i,function(_item){
            return handelArray(_item);
        },function(_item){
            //数组里的裸函数，this等于这个数组本身
            return handelFunction(_item,result);
        },function(_item){
            return deepClone(_item);
        },function(_item){
            return _item;
        }));
    }

    return result;
}

//类型判断
let desideType = function(_item,_arrayCall,_funcCall,_objectCall,_defaultCall){
    if(Array.isArray(_item)){
        return _arrayCall(_item);
    } 
    if(typeof _item === 'function'){
        return _funcCall(_item);
    } 
    if(typeof _item === 'object'){
        return _objectCall(_item);
    } 
    return _defaultCall(_item);
}

//深度克隆
let deepClone = function(_obj,_parent){
    //判断空的情况
    if(typeof _obj === 'undefined' || _obj === null){
        return _obj;
    }

    //判断parent是否为空的情况
    if(typeof _parent === "undefined"){
        _parent = window | null;
    }
    let result;

    //先判断类型
    result = desideType(_obj,function(_item){
        return handelArray(_item);
    },function(_item){
        return handelFunction(_item,_parent);
    },function(_item){
        let res = {};
        for(let key in _item){
            if(_item.hasOwnProperty(key)){
                res[key] = deepClone(_item[key],_item);
            }
        }
        return res;
    },function(_item){
       return _item;
    });

    return result;
}
可以用这里的现成方法去克隆，每种方式都不一样，对应的场景也不一样。
import { clone, cloneJSON, cloneLoop, cloneForce } from '@jsmini/clone';
别自己写克隆函数了。

我的理解：
首先在深度优先（DFS:Depth-First-Search）进行遍历的时候，期间的处理函数不能用闭包，这样一来被克隆对象和克隆结果将产生引用关系，即克隆失败。
需要尽可能地使用返回值的方式操作
这个深拷贝问题的更深层问题有：
1.如何避免爆栈问题
2.如何避免引用问题
3.需要完成map,set的判断和拷贝工作

那如何避免爆栈问题呢？
爆栈问题最好的方式是：
迭代遍历:

function cloneLoop(x) {
    const root = {};

    // 栈
    const loopList = [
        {
            parent: root,
            key: undefined,
            data: x,
        }
    ];

    while(loopList.length) {
        // 深度优先（DFS:Depth-First-Search）
        const node = loopList.pop();
        const parent = node.parent;
        const key = node.key;
        const data = node.data;

        // 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素
        let res = parent;
        if (typeof key !== 'undefined') {
            res = parent[key] = {};
        }

        for(let k in data) {
            if (data.hasOwnProperty(k)) {
                if (typeof data[k] === 'object') {
                    // 下一次循环
                    loopList.push({
                        parent: res,
                        key: k,
                        data: data[k],
                    });
                } else {
                    res[k] = data[k];
                }
            }
        }
    }

    return root;
}

=====================================================================================
=====================================================================================
=====================================================================================
装饰器模式

装饰器模式，又名装饰者模式，它的定义是，在不改变原型对象的基础上，通过对其进行包装拓展，使原有对象
可以满足用户的更复杂需求。

我的理解：
装饰器模式的意思是，比如大概以前的某个员工写了一个弹窗组件，其实你并不知道弹窗组件的逻辑，你只是把它
当成；一个黑盒子进行操作
在这个基础上例如要加入一些别的特性，例如修改颜色，修改弹窗的按钮状态。
如果选择在外部写一些代码覆盖这个弹窗原本的效果，那么这就是装饰器模式。
反之就是需要去修改它的源码。

这里需要反复指出一个很严重的问题，就是：
这种情况下使用装饰者模式其实并不太好，容易造成代码冗余。
然后在编写过程中需要注意单一职责原则。


=====================================================================================
=====================================================================================
=====================================================================================
@ES7中的装饰器:
在ES7中可以使用@语法糖轻松地给一个类装上装饰器:

例如：

let aaclass = function(target){
    target.hasDecorator = true
  	return target
}


// 将装饰器“安装”到Button类上
@classDecorator
class Button {
    // Button类的相关逻辑
}

// 验证装饰器是否生效
console.log('Button 是否被装饰了：', Button.hasDecorator)



同样的方式可以用来装饰函数:

// 具体的参数意义，在下个小节，这里大家先感知一下操作
function funcDecorator(target, name, descriptor) {
    let originalMethod = descriptor.value
    descriptor.value = function() {
    console.log('我是Func的装饰器逻辑')
    return originalMethod.apply(this, arguments)
  }
  return descriptor
}

class Button {
    @funcDecorator
    onClick() { 
        console.log('我是Func的原有逻辑')
    }
}

// 验证装饰器是否生效
const button = new Button()
button.onClick()


装饰器语法糖背后的故事
正如Class关键字背后其实是es5的构造函数一样，装饰器的语法糖背后也是我们的老朋友

函数传参&调用
将被装饰者交给装饰器，才是装饰模式的具体动作。

装饰器函数执行的时候，Button实例还并不存在，这是因为实例是在我们的代码运行时动态生成的
而装饰器函数则是在编译阶段就执行了。

在编写类装饰器时，只需要一个target就好了，但是在写方法装饰器时，我们往往需要至少三个参数

function funcDecorator(target, name, descriptor) {
    let originalMethod = descriptor.value
    descriptor.value = function() {
    console.log('我是Func的装饰器逻辑')
    return originalMethod.apply(this, arguments)
  }
  return descriptor
}

第一个参数的意义，前文已经解释过。第二个参数的意义name，是我们修饰的目标属性名称。
关键在descriptor上，它是我们使用频率最高的一个参数，它的真面目就是属性描述对象。
但Object.defineProperty方法我想大家多少都用过，它的调用方式是这样的：
Object.defineProperty(obj, prop, descriptor)
详情请看Object.defineProperty文章;
此处的descriptor和装饰器函数里descriptor是一个东西，它是Javascript提供的一个内部数据结构，
一个对象，专门用来描述对象的属性。它由各种各样的属性描述符组成，这些描述符又分为数据描述符和存取描述符。

 - 数据描述符
    configurable
    enumerable
    writable
    value

 - 存取描述符
    get
    set


生产实践:
------------------------------------------------------------------------

React中的装饰器:HOC
高阶组件就是一个函数，而且该函数接受一个组件作为参数，并返回一个新的组件。

Hoc(Higher Order Component) 即高阶组件。它是装饰器在React中的实践，同时也是React应用中非常重要的一部分。
通过编写高阶组件，我们可以充分利用现有逻辑，提高编码效率和代码的健壮性。

我们现在编写一个高阶组件，它的作用是把传入的组件对剑一个有红色边框的容器里（拓展样式
）。

import React,{Component} from 'react';
//WrappedComponent 高阶组件关键字
const BorderHoc = WrappedComponent => class extends Component{
    render(){
        return <div style={{border:"1px solid #ff0000"}} >
            <WrappedComponent />
        </div>
    }
}

export default borderHoc;


然后用这个来装饰目标组件

import React,{Component}from 'react';
import BorderHoc from './BorderHoc';

// 用BorderHoc装饰目标组件
@BorderHoc 
class TargetComponent extends React.Component {
  render() {
    // 目标组件具体的业务逻辑
  }
}

// export出去的其实是一个被包裹后的组件
export default TargetComponent

可以看出高阶组件从实现层面来看其实就是上文我们提到过的类装饰器。

优质的源码阅读材料——core-decorators
前面都在教大家怎么写装饰器模式，这里来聊聊怎么用好装饰器模式。

装饰器模式的优势在于其极强的灵活性和可复用性——它本质上是一个函数，而且往往不依赖于任何逻辑而存在。
这一点提醒了我们，当我们需要用到某个反复出现的拓展逻辑时，比起自己闷头搞，不如去看一看团队（社区）
里有没有现成的实现，如果有，那么贯彻“拿来主义”，直接@就可以了。所以说装饰器模式是个好同志，它可以帮
我们省掉大量复制粘贴的时间。

这里就要给大家推荐一个非常赞的装饰模式库 —— core-decorators。core-decorators 帮我们实现好了一些使用频率
较高的装饰器，比如@readonly(使目标属性只读)、@deprecate(在控制台输出警告，提示用户某个指定的方法已被废除)
等等等等。这里强烈建议大家把 core-decorators 作为自己的源码阅读材料，你能收获的或许比你想象中更多~

（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）

对了，装饰器的话，可以叠加运行。




=====================================================================================
=====================================================================================
=====================================================================================
适配器模式
适配器模式就是通过把一个类的接口变换成客户端所期待的另一种接口,以帮助我们解决不兼容的问题。

我的理解，就是把一些项目里的老库进行更新，但是不改变项目里代码的写法，用适配器的方式适配到新的库里去。


=====================================================================================
=====================================================================================
=====================================================================================
代理模式就是让另一个对象代理某个对象的操作
例如在前端无法跨域操作的时候，可以编写一个代理服务，代理进行操作。
例如前端的Proxy类，可以实例化一个代理对象
代理对象的handler参数可以帮助实现一个getter和一个setter

我的MVVM的核心原理就是使用Proxy对象来实现的。

=====================================================================================
=====================================================================================
=====================================================================================
事件代理
事件代理是最常见的一种代理的应用模式
我的理解：
其实就是以前在循环项目渲染dom节点的时候，喜欢每个元素都绑定一个事件
这样的话浏览器的开销会很大。
事件代理其实意思是说可以在这些元素的父级节点上绑定一个事件，让父级节点
代理子节点的所有事件处理。
这叫事件代理。
-------------------------------------------------------------------------------------
虚拟代理：
虚拟代理
虚拟代理指的是先让一个A对象代理另一个B对象的业务，然后在合适时机取得A对象的业务成果给B业务使用。

例如我在GOM中使用了一个懒加载就是这样的原理，这个项目的图片很多，所以我使用了虚拟代理的方式去做，
我先创建了一个遮罩层，然后使用js 创建 image对象去内存里异步加载图片，等图片全加载完，再让页面上的
元素都访问缓存中的图片，然后去除遮罩层.

------------------------------------------------------------------------------------
缓存代理模式

其实就是我在写ArrowJs的时候写的缓存机制，一些模块被加载过就不需要重复加载，有缓存过的模块直接
从堆里面取出来就好了，但是需要在请求之前检查一下缓存堆里是否存在同样的模块，存在的话就直接取出来返回。
不存在在去考虑如何请求这个模块。


------------------------------------------------------------------------------------
保护代理
保护代理就是类似于在填写表单的时候的字符串验证等操作。


=====================================================================================
=====================================================================================
=====================================================================================

观察者模式

观察者模式最重要的两个角色：
发布者
订阅人

我的理解
其实观察者很好理解，就是类似事件绑定一样，需要一个观察类，观察类通过实现绑定事件这样的方法，往类
自身的列表里添加这个事件响应时相应的动作，待这个事件被触发之后，这个类需要回调自身列表里所有的函数
并传入相关的参数来通知这些函数事件发生的具体细节

其实我自己就用过很多观察者模式
1.在自己的MVVM框架里就实现过，例如观察到Proxy里的某个变量发生变更，那么我就去绑定列表里去查找是否有
任何事件和这个变量相关，相关的话就执行相关的这个事件的回调函数。
2.在制作gom和4jnet的时候，需要实现一个观察者通知所有关注钱包状态变更的代码。
3.在编写拼多多爬虫的时候，使用观察者的情况随处可见，比如登录器的登录列队，就是登录的时候向登录器订阅
一个登录操作，操作完成后响应给响应的订阅者。
等等

观察者模式，解决的其实是模块间的耦合问题，有它在，即便是两个分离的、毫不相关的模块，也可以实现数据通信。

=====================================================================================
=====================================================================================
=====================================================================================
迭代器模式
class myMap{
    items = [];
    constructor(){

    }

    //获取方法
    get(_key){
        for(var i of this.items){
            if(i[0] === _key){
                return i;
            }
        }
    }

    //设置方法
    set(_key,_value){
        let result = [_key,_value]
        this.items.push(result);
        return result;
    }

    //实现迭代工厂函数
    [Symbol.iterator](){
        let itemsTemp =  this.items;
        let index = -1;

        //创建迭代器并返回
        let it = {
            //实现next方法
            next:function(){
                let result = {
                    value:undefined,
                    done:true
                };
                
                if(index + 1 >itemsTemp.length -1){
                    
                }else{
                    index += 1;
                    result.value = itemsTemp[index];
                    result.done = false;
                }

                return result;
            }
        }

        //返回迭代器
        return it;
    }
}

















