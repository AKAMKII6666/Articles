
https://juejin.cn/post/7075701341997236261

补一些基础

类组件  是指16版本之前的react组件写法
函数组件  是指16版本之后的新增的组件写法
自定义hook  是指16版本之后用于模拟自定义类的写法


这两篇文章结合看

先了解生命周期:

简单来说就是:

挂载
↓
更新        更新流程  render → commit
↓
卸载

在首次渲染页面的时候，会调用mount相关的生命周期钩子，在之后的页面渲染当中，毁掉哟让那个Update相关的生命周期钩子

//组将将要收到父组件的更新
	componentWillReciveProps() {}

	//组件即将挂载
	componentWillMount() {
		console.log("1");
	}

	//组件已经挂载
	componentDidMount() {
		console.log("2");
	}

	//判断苏建是否要更新props
	shouldCompanentUpdate() {
		return true;
	}

	//组件即将更新
	componentWillUpdate() {
		console.log("子组件componentWillUpdate");
	}

	//组件完成更新
	componentDidUpdate() {
		console.log("子组件componentDidUpdate");
	}

	/*
		组件即将卸载
	*/
	componentWillUnmount() {
		console.log("子组件componentWillUnmount");
	}


熟悉一下react的钩子
https://juejin.cn/post/7096137407409422344
render 阶段：

------------------------------------------------------------------------
constructor
该方法只会执行一次，调用该方法会返回一个组件实例

一般在 constructor 中做一些组件的初始化工作，例如：初始化组件的 state。

------------------------------------------------------------------------
componentWillReceiveProps
在已挂载组件接收到新的 props 之前调用。你可以在这个函数中比较新旧 props，并根据新旧 
props 更改 state。但是它会破坏 props 数据的单一数据源。

我们一般不使用此生命周期函数，因为它通常会破坏数据源的单一性。

------------------------------------------------------------------------
getDerivedStateFromProps
它是一个静态方法，接收 propsprops 和 statestate 两个参数。它会在调用 render 方法之前被调用，不管是在初始挂载时
还是在后续组件更新时都会被调用。

它可以返回一个对象，用来更新 state，就像它的名字一样，从 props 中获取衍生的 state。如果不需要更新 state 则可以
返回 null。

此生命周期钩子不常用，如果可以的话，我们也尽可能不会使用它。

------------------------------------------------------------------------
shouldComponentUpdate
在组件更新之前调用，但是首次渲染或者使用forceUpdate 函数时不会被调用。跟它的名字一样，它用来判断一个组件是否应该
更新。

它接收两个参数，nextProps 和 nextState，即下一次更新的 props 和下一次更新的 state。我们可以将 this.props 和 
nextProps 比较，以及将 this.state 与 nextState 比较，并返回 false，让组件跳过更新。不过注意：它并不会阻止子组
件因为 state 改变而导致的更新。

------------------------------------------------------------------------
render
render 方法是类组件中唯一必须实现的方法，它的返回值将作为页面渲染的视图。render 函数应该为纯函数，
也就是对于相同的 state 和 props，它总是返回相同的渲染结果。
render 函数被调用时，会返回以下四种类型之一：

React 元素：通常为 JSX 语法。例如：<div />、<MyComponent> 等等。
数组或者 fragments：render 方法可以通过数组返回多个元素。
Portals：渲染子节点至不同的子树中。
字符串或者数值：会作为文本节点被渲染。
boolean 类型或者 null：什么都不渲染。

需要注意的是：如果 shouldComponentUpdate 生命周期钩子返回 false，则 render 方法（render 阶段后续生命周
期钩子）不会执行。










commit 阶段
------------------------------------------------------------------------
componentDidMount
该生命周期方法会在组件挂载之后执行，也只会执行一次，也就是将组件对应的dom插入dom树中之后调用。
如果在 componentDidMount 中直接调用 this.setState，它会触发额外的渲染，会再一次调用 render 函数，
但是浏览器中视图的更新只会执行一次。

依赖于 DOM 的初始化操作应该放在这里，此外，我们一般在这个生命周期方法中发送网络请求、添加订阅等。

------------------------------------------------------------------------
getSnapshotBeforeUpdate

此生命周期函数在最近一次渲染提交至 DOM 树之前执行，此时 DOM 树还未改变，我们可以在这里获取 DOM 改变前的信息，
例如：更新前 DOM 的滚动位置。
它接收两个参数，分别是：prevProps、prevState，上一个状态的 props 和上一个状态的 state。它的返回值将会传递给 
componentDidUpdate 生命周期钩子的第三个参数。
使用场景：
需要获取更新前 DOM 的信息时。例如：需要以特殊方式处理滚动位置的聊天线程等。

------------------------------------------------------------------------
componentDidUpdate
在组件更新后立即调用，首次渲染不会调用该方法。它的执行时机和 componentDidMount 一致，只是 componentDidMount 
在首次渲染时调用，而 componentDidUpdate 在后续的组件更新时调用。可以在这个生命周期中直接调用 this.setState，
但是必须包裹在一个条件语句中，否则会导致死循环。
componentDidUpdate 接收三个参数，分别是 prevProps、prevState、snapshot，即：前一个状态的 props，前一个状态
的 state、getSnapshotBeforeUpdate 的返回值。
如果组件实现了 getSnapshotBeforeUpdate 生命周期函数，则 getSnapshotBeforeUpdate 的返回值将作为
 componentDidUpdate 的第三个参数。
使用场景：
在这个生命周期方法中，可以对 DOM 进行操作或者进行网络请求。

------------------------------------------------------------------------
componentWillUnmount

这个生命周期函数会在组件卸载以及销毁之前调用。




通常用来执行组件的清理操作，例如：清除 timer、取消网络请求、清除订阅等。

------------------------------------------------------------------------
新生命周期的调用顺序:

import React from 'react';

class App extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      count: 0,
    }
    console.log('App constructor');
  }

  static getDerivedStateFromProps() {
    console.log('App static getDerivedStateFromProps');
    return null;
  }

  componentDidMount() {
    console.log('App componentDidMount');
  }

  render() {
    console.log('App render');
    return (
      <div>
        <Child order={1} />
        <Child order={2} />
      </div>
    )
  }
}

class Child extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      count: 0,
    };
    console.log(`Child${this.props.order} constructor`);
  }

  static getDerivedStateFromProps(props) {
    console.log(`Child${props.order} static getDerivedStateFromProps`);
    return null;
  }

  componentDidMount() {
    console.log(`Child${this.props.order} componentDidMount`);
  }

  render() {
    console.log(`Child${this.props.order} render`);
    return (
      <div>
        Child{this.props.order}
      </div>
    )
  }
}

export default App;

------------------------------------------------------------------------
子组件:
import React from 'react';

class App extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      count: 0,
    }
    console.log('App constructor');
  }

  static getDerivedStateFromProps() {
    console.log('App static getDerivedStateFromProps');
    return null;
  }

  shouldComponentUpdate(nextProps) {
    console.log('App shouldComponentUpdate');
    return true;
  }

  getSnapshotBeforeUpdate(prevProps) {
    console.log('App getSnapshotBeforeUpdate');
    return null;
  }

  componentDidUpdate() {
    console.log('App componentDidUpdate');
  }

  render() {
    console.log('App render');
    return (
      <div>
        <div onClick={() => this.setState((count) => ({ count: count + 1 }))}>App</div>
        <Child order={1} />
        <Child order={2} />
      </div>
    )
  }
}

class Child extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      count: 0,
    };
    console.log(`Child${this.props.order} constructor`);
  }

  static getDerivedStateFromProps(props) {
    console.log(`Child${props.order} static getDerivedStateFromProps`);
    return null;
  }

  shouldComponentUpdate(nextProps) {
    console.log(`Child${nextProps.order} shouldComponentUpdate`);
    return true;
  }

  getSnapshotBeforeUpdate(prevProps) {
    console.log(`Child${prevProps.order} getSnapshotBeforeUpdate`);
    return null;
  }

  componentDidUpdate() {
    console.log(`Child${this.props.order} componentDidUpdate`);
  }

  render() {
    console.log(`Child${this.props.order} render`);
    return (
      <div onClick={() => this.setState((count) => ({ count: count + 1 }))}>
        Child{this.props.order}
      </div>
    )
  }
}


https://juejin.cn/post/7121378029682556958
----------------------------------------------------
react渲染原理正文

React element

总的来说，我们在写react中的html标签的时候，写的其实是jsx模板的语法，实际上在经过babel将jsx转译出来以后
会被编译成reactElement,其实就是一个json格式。

----------------------------------------------------
react vdom

在将dom树提交给浏览器之前，react自己就先构建了一颗自己的dom树，这棵树的元素结构都来源于上文提到的reactElement
在render阶段reactElement将被组织成vDom,它将在react里被套好事件，以及填写好属性。

在reactElement白组织成vdom树的时候，将会对以下类型的元素做处理:
 - 1.原本就是Dom的节点，将按照原生dom的属性范式填写属性
 - 2.组件节点,当扫描到reactelement树的时候发现是函数或者类的时候，将会创建组件节点
 - 3.文本节点，当直接书写数字或者字符串的时候，将生成文本节点
 - 4.空节点，就是什么都没有的节点（patch阶段的时候用来节省性能用的）
 - 5.数组节点，就是一串由react元素组成的数组


---------------------------------------------------
首次渲染阶段:


初始元素(reactElement)  →  虚拟节点（不同的节点对应到不同虚拟节点类型） → 挂载到页面

所以说，从初始元素到虚拟节点到底做了什么?

1.初始元素
对于dom元素，直接生成对应的真实dom元素就好了，相关属性映射进去就可以了。

2.组件节点

 - 如果是函数组件，就调用这个函数（实际上是new），返回这个函数组件的reactelement,然后继续递归遍历下去。
 - 如果是类组件，就执行它的构造函数new一个实例，然后执行static getDerivedStateFromProps,然后调用render钩子，返回这个组件的reactelement,然后继续递归遍历下去。

3.文本节点
针对文本节点，会直接通过document.createTextNode创建真实的文本节点。

4.空节点
如果生成的是空节点，那么它将什么都不会做！对，就是那么简单，啥都不做。

数组节点
就像前面提到的一样，React不会直接渲染数组，而是将里面的每一项拿出来遍历，根据不同的节点类型去做不同的事，直到递归处理完数组里的每一项。


递归处理好所有vdom的节点之后，就可以提交将整棵数交给浏览器进行渲染了。

-----------------------------------------------------
更新和卸载:
组件挂载好之后就会进入活跃状态。

------------------------------------------------------
更新的场景:

1.组件的更新  setState
 - 运行当前类组件的生命周期静态方法static getDerivedStateFromProps。根据返回值合并当前组件的状态。
 - 运行当前类组件的生命周期方法shouldComponentUpdate。如果该方法返回的false。直接终止更新流程！
 - 运行当前类组件的生命周期方法render，得到一个新的vDom树，进入新旧两棵树的对比更新。
 - 将当前类组件的生命周期方法getSnapshotBeforeUpdate加入执行队列，等待将来执行。
 - 将当前类组件的生命周期方法componentDidUpdate加入执行队列，等待将来执行。
 - 重新生成vDom树。
 - 根据vDom树更新真实DOM.
 - 执行队列，此队列存放的是更新过程中所有新建类组件的生命周期方法componentDidMount。
 - 执行队列，此队列存放的是更新过程涉及到原本存在的类组件的生命周期方法getSnapshotBeforeUpdate。
 - 执行队列，此队列存放的是更新过程涉及到原本存在的类组件的生命周期方法componentDidUpdate。
 - 执行队列，此队列存放的是更新过程中所有卸载的类组件的生命周期方法componentWillUnMount。

------------------------------------------------------
对比更新过程（diff）
React怎么知道当前更新的组件在新树种的什么位置呢?
我们都知道React的diff算法将之前的复杂度O(n^3)降为了O(n)。它做了以下几个假设：

 - 假设此次更新的节点层级不会发生移动（直接找到旧树中的位置进行对比）。
 - 兄弟节点之间通过key进行唯一标识。
 - 如果新旧的节点类型不相同，那么它认为就是一个新的结构，比如之前是初始元素div现在变成了初始元素span那么它会认为整个结构全部变了，无论嵌套了多深也会全部丢弃重新创建。

key的作用:

未添加 key:

        更新前节点                                    更新后节点

1       Dom节点         →类型不一致，销毁跟新前节点     类组件节点
2       类组件节点      →类型不一致，销毁跟新前节点     文本节点
3       文本节点        →类型不一致，销毁跟新前节点     空节点
4       空节点          →类型不一致，销毁跟新前节点     数组节点
5       数组节点        →找不到对比目标，直接丢弃

---结论是，要把更新前五个节点都在dom里销毁，然后还要将新的节点创建到dom里去


添加了key:


        更新前节点                                                    更新后节点

1       Dom节点key=1         →在右边数组中找不到key相同的，丢弃         类组件节点key=2
2       类组件节点key=2      →可以找到key相同的节点，无需操作dom，保留   文本节点key=3
3       文本节点key=3        →可以找到key相同的节点，无需操作dom，保留   空节点key=4
4       空节点key=4          →可以找到key相同的节点，无需操作dom，保留   数组节点key=5
5       数组节点key=5        →可以找到key相同的节点，无需操作dom，保留

---结论是，只需要在真实的dom里销毁第一个节点，其它的节点还可以继续保留，因为类型一致，所以只需要更新内容就好了


-------------------------------------------------------
另一种情况，未找到对比目标：

            老vdom树                                                               新vdom树
            div              →在第一个节点发现类型不一致，从新创建span                span
            button           →在第一个节点发现类型不一致，从新创建button              button

---结论是，一般这种情况下只要兄弟节点的第一个节点变更了，那么在diff的过程中会把其它节点都换了


如果未找到对比的目标，跟节点类型不一致的做法类似，那么对于多出的节点进行挂载流程，对于旧节点进行卸载直接弃用。
如果其包含子节点进行递归卸载。对于初始类组件节点会多一个步骤，那就是运行生命周期方法componentWillUnmount。注意：
尽量保持结构的稳定性，如果未添加key的情况下，兄弟节点更新位置前后错位一个那么后续全部的比较都会错位导致找不到对比目
标从而进行卸载新建流程，对性能大打折扣。

如果在button之后还有一万个兄弟节点，那么也全部都找不到对比目标从而进行卸载重新创建流程。所以在进行条件渲染显示隐藏时，
官方推荐以下做法：

1.使用visibility来控制显示隐藏
2.或者在隐藏时给一个空节点来保证对比前后能找到同一位置，不音响后序兄弟节点的比较。

--------------------------------------------------------------
对于生命周期我们只需关注比较重要的几个生命周期的运行点即可，比如render的作用、使用componentDidMount在挂载完真实DOM后做一些副作用操作、
以及性能优化点shouldComponentUpdate、还有卸载时利用componentWillUnmount清除副作用。

对于首次挂载阶段，我们需要了解React的渲染流程是：通过我们书写的初始元素和一些其他可以生成虚拟节点的东西来生成虚拟节点。然后针对不同的节
点类型去做不同的事情，最终将真实DOM挂载到页面上。然后执行渲染期间加入到队列的一些生命周期。然后组件进入到活跃状态。

对于更新卸载阶段，需要注意的是有几个更新的场景。以及key的作用到底是什么。有或没有会产生多大的影响。还有一些小细节，比如条件渲染时，不要
去破坏结构。尽量使用空节点来保持前后结构顺序的统一。重点是新旧两棵树的对比更新流程。找到目标，节点类型一致时针对不同的节点类型会做哪些事，
类型不一致时会去卸载整个旧节点。无论有多少子节点，都会全部递归进行卸载。


-------------------------
reactHook原理:
https://juejin.cn/post/7075701341997236261

































